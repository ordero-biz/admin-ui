name: Sync QA with Main

on:
  workflow_dispatch:

jobs:
  sync_qa_with_main:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Setup Git
      - name: Setup Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      # Step 3: Compare branches to decide if `main` is ahead
      - name: Compare main and qa branches
        id: check_diff
        run: |
          # Fetch all branches
          git fetch origin

          # Determine if `main` is ahead of `qa`
          COMMITS_AHEAD=$(git rev-list --left-only --count origin/main...origin/qa)

          # Output variable
          echo "commits_ahead=$COMMITS_AHEAD" >> $GITHUB_ENV
          echo "Main is $COMMITS_AHEAD commits ahead of QA."

      # Debugging step for commit comparison
      - name: Debug Commits Ahead Check
        run: |
          echo "Commits Ahead: ${{ env.commits_ahead }}"

      # Step 4: If `main` is ahead, create a branch with forced changes
      - name: Create a sync branch (force PR)
        if: ${{ env.commits_ahead != '0' }}
        run: |
          # Create and switch to a new branch from `main`
          git checkout -b temp-sync-main-to-qa origin/main

          # Force an empty commit to ensure branch difference
          git commit --allow-empty -m "[Automation] Force PR with empty commit"

          # Push the branch to the remote
          git push --force origin temp-sync-main-to-qa

      # Step 5: Create pull request using `peter-evans/create-pull-request`
      - name: Create Pull Request
        id: create_pr
        if: ${{ env.commits_ahead != '0' }}
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: temp-sync-main-to-qa
          base: qa
          title: "[Automation] Sync main to qa"
          body: |
            ## Automated PR
            This PR merges changes from `main` into `qa`.

            - **Commits ahead in `main`**: ${{ env.commits_ahead }}
          labels: automated
          delete-branch: true

      # Step 6: Debug PR Creation
      - name: Debug Created PR
        if: ${{ steps.create_pr.outputs.pull-request-url != '' }}
        run: |
          echo "PR URL: ${{ steps.create_pr.outputs.pull-request-url }}"
          echo "Branch: ${{ steps.create_pr.outputs.pull-request-branch }}"

      # Step 7: Auto-approve Pull Request
      - name: Auto-Approve PR
        if: ${{ steps.create_pr.outputs.pull-request-url != '' }}
        run: |
          PR_NUMBER=$(echo "${{ steps.create_pr.outputs.pull-request-url }}" | grep -oE '[0-9]+$')
          echo "Auto-approving PR #$PR_NUMBER"
          curl -X POST -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
               -H "Accept: application/vnd.github+json" \
               https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER/reviews \
               -d '{"body":"Auto-approved by workflow.","event":"APPROVE"}'

      # Step 8: Auto-merge Pull Request
      - name: Auto-Merge PR
        if: ${{ steps.create_pr.outputs.pull-request-url != '' }}
        run: |
          PR_NUMBER=$(echo "${{ steps.create_pr.outputs.pull-request-url }}" | grep -oE '[0-9]+$')
          echo "Auto-merging PR #$PR_NUMBER"
          curl -X PUT -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
               -H "Accept: application/vnd.github+json" \
               https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER/merge \
               -d '{"merge_method":"squash"}'