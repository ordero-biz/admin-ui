name: Sync main to qa

on:
  workflow_dispatch: # Triggered manually

permissions:
  contents: write      # For creating branches/commits
  pull-requests: write # For handling pull requests
  actions: write       # For programmatically approving a PR

jobs:
  sync-main-to-qa:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Fetch changes and ensure proper comparison
      - name: Fetch all branches
        run: git fetch --all

      # Step 3: Compare main and qa branches
      - name: Compare main and qa branches
        id: check_diff
        run: |
          git fetch origin
          COMMITS_AHEAD=$(git rev-list --left-only --count origin/main...origin/qa)
          echo "Main is $COMMITS_AHEAD commits ahead of QA"
          echo "commits_ahead=$(echo "$COMMITS_AHEAD" | xargs)" >> $GITHUB_ENV

      # Debug commits ahead
      - name: Log commits ahead
        run: |
          echo "Commits ahead value: ${{ env.commits_ahead }}"

      # Ensure a dummy commit for PR creation
      - name: Create dummy commit for PR
        if: ${{ env.commits_ahead != '0' }}
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          # Create a temporary branch based on main
          git checkout -b temp-sync-main-to-qa origin/main
          
          # Add a dummy commit
          git commit --allow-empty -m "Dummy commit to force PR creation"
          
          # Push the temporary branch to origin
          git push origin temp-sync-main-to-qa

      # Debug pushed branches
      - name: Check pushed branches
        if: ${{ env.commits_ahead != '0' }}
        run: git branch -r

      # Debug: Log commits in temporary branch
      - name: Debug temporary branch
        if: ${{ env.commits_ahead != '0' }}
        run: git log origin/temp-sync-main-to-qa --oneline

      # Create the PR
      - name: Create PR from main to qa
        id: create_pr
        if: ${{ env.commits_ahead != '0' }}
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: temp-sync-main-to-qa
          base: qa
          title: Sync main to qa
          body: |
            This automated PR merges the latest changes from `main` into `qa`.
          labels: automated
          delete-branch: true
          commit-message: Sync main to qa
          branch-suffix: timestamp  # Avoid branch name collisions

      # Step 4: Create PR from main to qa
      - name: Create PR from main to qa
        id: create_pr
        if: ${{ env.commits_ahead != '0' }}
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: temp-sync-main-to-qa # Temporary branch created in the previous step
          base: qa
          title: Sync main to qa
          body: |
            This automated PR merges the latest changes from `main` into `qa`.
          labels: automated
          delete-branch: true