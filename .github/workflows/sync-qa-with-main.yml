name: Sync QA with Main

on:
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  sync_qa_with_main:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Setup Git
      - name: Setup Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      # Step 3: Compare commits between main and qa
      - name: Compare main and qa branches
        id: check_diff
        run: |
          git fetch origin
          COMMITS_AHEAD=$(git rev-list --left-only --count origin/main...origin/qa)
          echo "Main is $COMMITS_AHEAD commits ahead of QA"
          echo "commits_ahead=$COMMITS_AHEAD" >> $GITHUB_ENV

      # Step 4: Prepare the temp-sync-main-to-qa branch
      - name: Create new sync branch
        run: |
          # Create or reset the branch temp-sync-main-to-qa
          git checkout -B temp-sync-main-to-qa origin/main

          # Add a dummy change to force PR creation if needed
          echo "Forced sync by workflow at $(date)" > .dummy-sync
          git add .dummy-sync
          git commit -m "[Automated] Force PR creation with dummy commit" || echo "No changes to commit"

          # Push the branch to origin
          git push --force origin temp-sync-main-to-qa

      # Step 5: Create the pull request
      - name: Create Pull Request
        id: create_pr_step
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: temp-sync-main-to-qa
          base: qa
          title: "[Automated] Sync main to qa"
          body: |
            ## Automated Pull Request
            This PR merges changes from `main` into `qa`.

            **Commits Ahead in Main:** ${{ env.commits_ahead }}
          labels: automated
          delete-branch: false
          commit-message: "[Automated] Sync main to qa - Forced PR"

      # Step 6: Auto-approve the Pull Request
      - name: Auto-approve pull request
        if: ${{ steps.create_pr_step.outputs.pull-request-url != '' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_URL="${{ steps.create_pr_step.outputs.pull-request-url }}"
          PR_NUMBER=$(echo "$PR_URL" | grep -oE '[0-9]+$')
          echo "Auto-approving PR #$PR_NUMBER"

          curl -X POST \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER/reviews \
            -d '{"body": "Auto-approved by workflow.", "event": "APPROVE"}'

      # Step 7: Auto-merge the Pull Request
      - name: Auto-merge pull request
        if: ${{ steps.create_pr_step.outputs.pull-request-url != '' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_URL="${{ steps.create_pr_step.outputs.pull-request-url }}"
          PR_NUMBER=$(echo "$PR_URL" | grep -oE '[0-9]+$')
          echo "Attempting to auto-merge PR #$PR_NUMBER"

          curl -X PUT \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER/merge \
            -d '{"merge_method": "squash"}'