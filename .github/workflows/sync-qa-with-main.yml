name: Sync main to qa

on:
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  sync-branches:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Configure git user
      - name: Configure Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      # Check if 'qa' branch exists
      - name: Check if 'qa' branch exists
        id: check_qa_branch
        run: |
          if git ls-remote --heads origin qa > /dev/null; then
            echo "qa branch exists"
            echo "exists=true" >> $GITHUB_ENV
          else
            echo "qa branch does not exist"
            echo "exists=false" >> $GITHUB_ENV
          fi

      # Stop workflow if 'qa' branch doesn't exist
      - name: Stop if 'qa' branch does not exist
        if: env.exists == 'false'
        run: exit 0

      # Create a new branch from 'main' to sync to 'qa'
      - name: Create sync branch
        run: |
          git checkout main
          git pull
          git checkout -b sync-main-to-qa

      # Push the sync branch
      - name: Push sync branch
        run: |
          git push origin sync-main-to-qa

      # Create a Pull Request to merge 'main' into 'qa'
      - name: Create PR to sync main to qa
        id: create_pr
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          base: qa
          branch: sync-main-to-qa
          title: Sync main to qa
          body: |
            This pull request was created automatically to sync changes from the `main` branch to the `qa` branch.

      # Automatically merge the PR
      - name: Auto-merge PR
        if: steps.create_pr.outputs.pull-request-number
        uses: actions/github-script@v6
        with:
          script: |
            const pr_number = parseInt(core.getInput('pr_number'), 10);
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr_number
            });

            if (pr.mergeable) {
              await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr_number,
                merge_method: 'merge' // Alternative: 'squash' or 'rebase'
              });
              console.log(`Pull request #${pr_number} merged successfully.`);
            } else {
              console.log(`Pull request #${pr_number} is not mergeable.`);
            }
          inputs:
            pr_number: ${{ steps.create_pr.outputs.pull-request-number }}