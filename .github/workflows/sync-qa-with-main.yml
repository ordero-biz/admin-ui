name: Sync QA with Main

on:
  workflow_dispatch:

jobs:
  sync_qa_with_main:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Setup Git
      - name: Setup Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      # Step 3: Compare main and qa branches
      - name: Compare main and qa branches
        id: check_diff
        run: |
          # Fetch all branches without affecting the working tree
          git fetch origin

          # Compare commits between origin/main and origin/qa
          COMMITS_AHEAD=$(git rev-list --left-only --count origin/main...origin/qa)

          # Output results
          echo "Main is $COMMITS_AHEAD commits ahead of QA"
          echo "commits_ahead=$(echo "$COMMITS_AHEAD" | xargs)" >> $GITHUB_ENV

      # Debugging step for commits_ahead
      - name: Debug commits_ahead value
        run: |
          echo "Commits ahead: ${{ env.commits_ahead }}"

      # Step 4.1: Force dummy changes to ensure PR creation
      - name: Force dummy changes to ensure PR creation
        if: ${{ env.commits_ahead != '0' }}
        run: |
          # Create a temporary branch based on main
          git checkout -b temp-sync-main-to-qa origin/main
          
          # Introduce a meaningful and unique dummy change with a timestamp
          echo "Automated sync process at $(date)" >> automated-sync-$(date +'%Y%m%d%H%M%S').log

          # Stage and commit the change
          git add .
          git commit -m "Automated sync process with dummy file"
          
          # Push the temporary branch to origin
          git push --force origin temp-sync-main-to-qa

      # Step 4.2: Create PR from main to qa
      - name: Create PR from main to qa
        id: create_pr_step
        if: ${{ env.commits_ahead != '0' }}
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: temp-sync-main-to-qa
          base: qa
          title: Sync main to qa
          body: |
            This automated PR merges the latest changes from `main` into `qa`.
          labels: automated
          delete-branch: true
          commit-message: Sync main to qa
          branch-suffix: timestamp

      # Step 4.3: Debug outputs from create-pull-request
      - name: Debug PR creation outputs
        if: ${{ steps.create_pr_step.outputs.pull-request-url != '' }}
        run: |
          echo "Pull request URL: ${{ steps.create_pr_step.outputs.pull-request-url }}"
          echo "Pull request branch: ${{ steps.create_pr_step.outputs.pull-request-branch }}"

      # Step 5: Auto-approve pull request
      - name: Auto-approve pull request
        if: ${{ steps.create_pr_step.outputs.pull-request-url != '' }} # Verify PR exists
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER=$(echo "${{ steps.create_pr_step.outputs.pull-request-url }}" | grep -oE '[0-9]+$')
          curl -X POST -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER/reviews \
            -d '{"body": "Automatically approved", "event": "APPROVE"}'

      # Step 6: Auto-merge pull request
      - name: Auto-merge pull request
        if: ${{ steps.create_pr_step.outputs.pull-request-url != '' }} # Verify PR exists
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER=$(echo "${{ steps.create_pr_step.outputs.pull-request-url }}" | grep -oE '[0-9]+$')
          curl -X PUT -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER/merge \
            -d '{"merge_method": "squash"}'